# This is an example configuration file for the connect server
# Copy this file to config.yaml and modify it to suit your needs.

# HTTP server configuration
http:
  # The URL of the backend
  backend_url: 'http://localhost:8080'

  # The IPv4 address to bind the HTTP server to
  ipv4_host: '0.0.0.0' # 0.0.0.0 = all interfaces

  # The IPv6 address to bind the HTTP server to
  ipv6_host: '::' # :: = all interfaces

  # The port to bind the HTTP server to, both IPv4 and IPv6 share the same port
  port: 8080

  # Sets Gin's trusted proxies. This is useful when you have a reverse proxy in front of your application that sets the X-Forwarded-For header.
  # This is a list of IP addresses or CIDR ranges that are trusted proxies.
  trusted_proxies: []

  # Sets which hosts are allowed by CORS. This is a list of hostnames or IP addresses.
  cors_hosts: []

  # OpenTelemetry configuration
  tracing:

    # Enable OpenTelemetry tracing
    enabled: false

    # The OpenTelemetry collector endpoint
    otlp_endpoint: ''

  # Golang pprof configuration
  pprof:

    # Enable Golang pprof
    enabled: false

  # Prometheus metrics configuration
  metrics:

    # Enable Prometheus metrics
    enabled: false

    # The IPv4 address to bind the Prometheus metrics server to
    ipv4_host: '127.0.0.1' # 127.0.0.1 = localhost

    # The IPv6 address to bind the Prometheus metrics server to
    ipv6_host: '::1' # ::1 = localhost

    # The port to bind the Prometheus metrics server to, both IPv4 and IPv6 share the same port
    port: 8081

# Persistence configuration
persistence:
  # Database configuration
  database:
    driver: 'sqlite' # sqlite, mysql, postgres
    database: 'rtz.sqlite3' # Path to the SQLite3 database file or database name for other drivers
    # host: 'localhost' # Hostname of the database server
    # port: 3306 # Port of the database server
    # username: 'root' # Username to connect to the database server
    # password: '' # Password to connect to the database server
    # extra_parameters: '' # Extra parameters to pass to the database driver

  # Storage for uploaded video and driving logs
  uploads:
    ##### Filesystem Example #####
    ##### This stores the files on the local filesystem
    ##### The directory will be created if it does not exist
    # driver: 'filesystem'
    # filesystem_options:
    #   directory: 'uploads/'

    ##### S3 Example #####
    ##### Authentication shall be done via the standard AWS environment variables
    ##### AWS_ACCESS_KEY_ID, AWS_SECRET_ACCESS_KEY, AWS_SESSION_TOKEN
    ####
    ##### Alternatively, you can use the AWS CLI to configure the credentials
    ##### aws configure
    ####
    ##### Or you can provide the credentials via IAM roles if running on AWS
    # driver: 's3'
    # s3_options:
    #  region: 'us-east-1'
    #  bucket: 'connect'
    #  endpoint: ''

# NATS MUST BE configured if you are going to run multiple instances of the server
# or use blue/green deployments, otherwise websockets will only work for users
# if they happen to hit the same instance where the device has a websocket connection.
nats:
  enabled: false
  token: ''
  url: 'nats://localhost:4222'

# User registration configuration
registration:
  # Enable user registration
  enabled: false

auth:
  google:
    enabled: false
    client_id: ''
    client_secret: ''
  github:
    enabled: false
    client_id: ''
    client_secret: ''
  custom:
    enabled: false
    client_id: ''
    client_secret: ''
    token_url: ''
    user_url: ''

jwt:
  secret: 'secret'

mapbox:
  public_token: 'changeme'
  secret_token: 'changeme'

# The number of parallel log parsers to run
parallel_log_parsers: 4

# Log configuration, one of debug, info, warn, error
log_level: info
